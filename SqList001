#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#define OK 1
#define ERROR 0
#define OVERFLOW -2
#define MAXSIZE 100
#define STUDENTNUMBER 3 

// 构造结构体和顺序表
typedef struct {
	int id;
	char name[20];
	float score;
} Student;
typedef Student ElemType;
typedef struct {
	ElemType *elem;
	int length;
} SqList;


// 定义函数返回的状态码 OK ERROR
typedef int Status;


// 初始化顺序表 推荐使用指针，否则容易出现一些错误 
Status InitialList(SqList *L) {
	L->elem=(ElemType*)malloc(sizeof(ElemType)*MAXSIZE);
	if(!L->elem) exit(OVERFLOW);
	L->length = 0; // 空表的长度为零
	return OK;
}


// 输入值,并不存储
void InputInfo(ElemType *e) {
	printf("学号:");
	scanf("%d",&e->id);
	printf("姓名:");
	scanf("%s",&e->name);
	printf("分数:");
	scanf("%f",&e->score);
}

void PrintInfo(ElemType *e){
	printf("学号是%-5d,姓名是%-6s,分数是%-5.2f\n",e->id,e->name,e->score);
} 


// 按照学号查找，此时的i表示序号，同数组中的序号
Status FindInfo(SqList *L,ElemType *e) {
	int i;
	if(i<0||i>L->length-1)  return ERROR;  //查找的位置不合理
	for(i=0; i<L->length-1; ++i) {
		if(L->elem[i].id == e->id) printf("查找成功!");
	}
	return 0;
}


// 插入，此时的i是位置
Status InsertInfo(SqList *L,int i,ElemType e) {
	int j;
	if(i<0||i>L->length) return ERROR;  //插入的位置不合理
	if(L->length == MAXSIZE) return ERROR;  // 超出顺序表的长度
	for(j=L->length-1; j>=i-1; --j) {
		L->elem[j+1] = L->elem[j];
	}
	L->elem[i-1] = e;
	++L->length;  // 顺序表的长度加一
	return OK;
}


// 删除，此时的i是顺序表中结构体的序号
Status DelInfo(SqList *L,int i) {
	int j;
	if(i<0||i>L->length-1)  return ERROR;  //删除的位置不合理
	for(j=i; j<=L->length-1; ++j) {
		L->elem[j-1] = L->elem[j];
	}
	--L->length;
	return OK;
}


// 程序的入口
void main() {
	int i;
	int insert_position;  //插入的位置
	int del_position;    //删除的位置
	SqList L;
	ElemType e;  //从顺序表中依次取出结构体
	ElemType l;  //插入新的结构体
	
	
	//初始化
	if(InitialList(&L)) printf("顺序表初始化成功!\n");
	else printf("顺序表初始化失败!\n");
	
	
	//输入3名学生的相关信息
	for(i=0; i<STUDENTNUMBER; ++i) {
		printf("请输入第%d名学生的信息:\n",i+1); 
		InputInfo(&L.elem[i]);
	}
	L.length = STUDENTNUMBER;
	
	
	//输出3名学生的相关信息
	for(i=0; i<STUDENTNUMBER; ++i) {
		printf("第%d名学生的信息",i+1);
		PrintInfo(&L.elem[i]);
	}
	
	
	//插入
	printf("请输入插入的位置:");
	scanf("%d",&insert_position);
	
	/*相关信息*/
	printf("新学生的学号:\n");
	scanf("%d",&l.id);
	printf("新学生的姓名:\n");
	scanf("%s",&l.name);
	printf("新学生的分数:\n");
	scanf("%f",&l.score);

	if(InsertInfo(&L,insert_position,l))
		printf("插入成功!\n");
	else
		printf("插入失败!\n");

	
	//清空屏幕
	system("cls"); 
	
	
	//删除
	printf("请输入删除的位置:");
	scanf("%d",&del_position);

	if(DelInfo(&L,del_position))
		printf("删除成功!");
	else
		printf("删除失败!");

}
